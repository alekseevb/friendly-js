//все браузерное окружение
console.log(window)

//Основной JavaScript
console.log('-------------Основной JavaScript-------------')

console.log(window.Math)
console.log(window.Object.keys({ name: 'Aleksei', age: 20 }))
console.log(window.Number('123'))
console.log(window.Boolean(0))

//BOM (Browser Object Model)
console.log('-------------BOM (Browser Object Model)------------')

console.log(window.navigator)
console.log(window.screen)
console.log(window.location)
console.log(window.history)
console.log(window.frames)
console.log(window.fetch)
console.log(window.XMLHttpRequest)

//DOM (Document Object Model)
console.log('-------------DOM (Document Object Model)-------------')
console.log(window.document)

----------------------------------------------------------------------------------------------------------------

//BOM (Browser Object Model)
console.log('Информация о браузере', window.navigator)
console.log('Информация об экране', window.screen)
console.log('Информация об URL', window.location)
console.log('Информация об истории текущей сессии', window.history)

//Сохранить данные в localStorage
window.localStorage.setItem('id', JSON.stringify({ id: 123 }))

const id = JSON.parse(
	//Получить данные из localStorage
	window.localStorage.getItem('key-name')
)

//Отправка на сервер GET-запроса и получение ответа
window
	.fetch('https://jsonplaceholder.typicode.com/users')
	.then(response => response.json())
	.then(users => console.log('Пользователи:', users))
--------------------------------------------------------------------------------------------------------------
console.log('Элемент <body>:', document.body)
console.log('Родительский элемент над <body>:', document.body.parentElement)
console.log('Соседний элемент перед <body>:', document.body.previousElementSibling)
console.log('Соседний элемент после <body>:', document.body.nextElementSibling)

console.log('Дочерние элементы <body>', document.body.children)

const bodyChildren = document.body.children

console.log(bodyChildren)

//Создание нового элемента <button>
const newButtonElement = document.createElement('button')

//Добавление нового элемента <button> в <body> в конец
document.body.appendChild(newButtonElement)

console.log(bodyChildren)

//Чтобы перебрать htmlCollection надо предварительно перевести в массив
const bodyChildrenArray = [...bodyChildren]

bodyChildrenArray.forEach(element => {
	console.log('Дочерний элемент <body>:', element)
})

//Так можно обратиться к первому дочернему элементу
const divElement = document.body.children[0]

console.log('Элемент <div>:', divElement)

//Так можно обратиться к первому и последнему дочернему элементу
console.log(
	'Первый дочерний элемент внутри <div>:',
	divElement.firstElementChild
)

console.log(
	'Первый дочерний элемент внутри <div>:',
	divElement.lastElementChild
)

const buttonElement = document.getElementById('myButton')

//Если мы хотим найти элемент не по id, а по имени селектора
const buttonElement2 = document.querySelector('button')

console.log('buttonElement:', buttonElement)
console.log('buttonElement:', buttonElement2)

// Если мы ищем какой-то элемент в html, то лучше его называть, как element
const linkElement = document.querySelector('a')
const listElement = document.querySelector('li')
const formElement = document.querySelector('form')
const inputElement = document.querySelector('input')

//Как лучше находить элементы в DOM-дереве = лучше через data атрибуты
const sliderElement = document.querySelector('[data-js-slider-]')
const sliderListElement = document.querySelector('[data-js-slider-list]')
const sliderSlideElement = document.querySelectorAll('[data-js-slider-slide]')


