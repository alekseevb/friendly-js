//Синхронный код, выполняющийся сразу
console.log('начало кода...')

//Асинхронная операция с использованием setTimeout, которая попадает в очередь задач
setTimeout(() => {
	console.log('Асинхронный код')
}, 2000)

//Синхронный код, выполняющийся сразу
console.log('конец кода...')

// collback функция - это функция, которая вызывается в ответ на совершения определенного события

/* 
функция, которая осуществляет запрос к серверу и ожидает url адреса и callback функцию,
которая будет выполнена где-то в makeRequest

задача:

мы разрабатываем фронтенд для маркетплейса по типу ozon/wb.
Изначально у нас есть id продавца и нам нужно получить имя автора первого отзыва 
на первый размещенный товар этого продавца
*/

const sellerId = 154

const makeRequest = (url, onSucces) => {}

makeRequest(`/api/sellers/${sellerId}`, seller => {
	const firstProductId = seller.productIds[0]

	makeRequest(`/api/products/${firstProductId}`, product => {
		const firstReviewId = product.reviewsIds[0]

		makeRequest(`/api/products/${firstReviewId}`, review => {
			const authorName = review.author.name
		})
	})
})



/*
promise    - специальный объект-надстройка 
для работы с асинхронным кодом

Promise имеет 3 состояния:
pending    - ожидание, исходное состояние 
fulfilled  - выполнено успешно, получен результат
rejected   - выполнено с ошибкой

Основные методы Promise:
then()     - обрабатывает fulfilled состояние
catch()    - обрабатывает rejected состояние 
*/

const promise = new Promise((fulfill, reject) => {
	console.log('Начало, состояние pending...')

	setTimeout(() => {
		if (Math.random() > 0.5) {
			fulfill('Ура, состояние fulfilled')
		} else {
			reject('Увы, состояние rejected')
		}
	}, 3000)
})

promise
	.then(successData => {
		console.log('Успех! Получены данные', successData)
	})
	.catch(errorData => {
		console.log('Ошибка. Получены данные:', errorData)
	})
